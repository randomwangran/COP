* Motivation

  Not sure how I got this book. Just find it on my desktop today. And
  I read some paragraph at the begining of this book.

  I am fascinating by the following sentence:

  #+BEGIN_QUOTE
  Freedom is the power to decide what your computer does, and the only
  way to have this freedom is to know what your computer is doing. 
  #+END_QUOTE

  This is something inline with someting deep in my mind. I am very
  comfortable with play with computers via command line, but I want to
  know more. Especially, I want to answer a question that initializies
  this journey:

  #+BEGIN_QUOTE
  how to damage my computer using your code?
  #+END_QUOTE

* Progress
  
  90/544 of course: SHELL PARAMETER EXPANSION

* Notes
** Chapter 1

   - ~Alt + F1 to F7~: switch curtain
   - Stephen R. Bourne: an mathmatician build the Bourne Shell
   - symbolic links could solve the naming a file that changes its
     name
   - create a new file ~> newfile~
   - joke: warning users that the system's /dev/null is already 98%
   - create a easy file with easy info
     #+BEGIN_SRC 
     $ cat > dummy.tex
     This is your input.
     #+END_SRC
     Then, ~Control + D~.
   - ~>~ can silently overwrite stuff, becareful.
   - uniq: delete uncessary lines
   - grep: -i ignore case
** Chapter 7
   - Brace Expansion: never use it before (cannot remember well)
     
     So powerful!

     #+BEGIN_SRC sh
     $ mkdir {2011..2019}-{01..12}
     #+END_SRC
     
     Then I got a lots of subfolder!

   - shell expansion:

     #+BEGIN_QUOTE
     Without a proper understanding of expansion, the shell will
     always be a source of mystery and confusion, and much of its potential power wasted.
     #+END_QUOTE
     
     I will stop at this point and do something to make my hands duty.

     Just want to do some good damage to this cluster, for sure just for practice.

** Chapter 7+
*** bash fork () Bomb

    #+BEGIN_SRC sh
    :(){:|:&
    };:
    #+END_SRC

    In this function, the termination of the function ~;~, I double
    checked on my old code, I never use them.

    It seems no issue even on my productive cases.

    The most dangerous part of piece of code is the ~:|:~ part, which
    I seem have some remember in this chapter.

    For example, what will happen when I do this:

    #+BEGIN_SRC sh
    cd | cd
    #+END_SRC

    EMM... nothing really happen...

    What's wrong?
*** TODO RTFM about shell expansion
    - what is tokens?

      "Expansion is performed on the command line after is has been
      split into tokens."
      
      Not sure what is the defination of tokens.

    - there's lots of expansion involing:
      
      - brace

	Can really understand what brace expansion meanings:

	#+BEGIN_SRC sh
	REYNOLSNUMBER=(1 2 3)
	count=${#REYNOLDSNUMBER[@]}
	#+END_SRC

	Can you explain why you use?

	- #

	- {}

	- @
	  
      - tilde

      - parameter and varaible

      - commmand subsitution

      - arithmetic

	I found that I used to 

	#+BEGIN_SRC sh
	$(bc <<< "${array[$INDEX]}")	
	#+END_SRC

	To calculate stuff.

	Maybe try this simple one in the future:
	#+BEGIN_SRC sh
	#!bin/bash

	a=1
	b=2
	c=$(( a + b ))

	echo "$c"
	#+END_SRC

      - word splitting

      - filename

    - there's a rule to decide the order of those expansions

    - I've learn a new word: "preamble"

      I saw this word in a documention called "GLWTGPL"? Can remember
      its exactly name.

    - tide

      I never use =~+/foo= before. It's equivenlent to =$PWD/foo=,
      which might be useful

*** find out all the shell command

    I think I need more time to review all the commands in the
    past. Although at that time, they solve the problem, but many
    cases, I don't know what the meaning of those command lines.

* Questions
* Exercises
