* progress

  25/342 2.2 resource

* chapter 01
** notes
*** 100 faster 
    cool, IBM 704 and you guys wanna build a new computer 100 faster
    than it? If I were one of the people working on that project, I
    would probaly say impossible. What a brave heart.
*** you can do it just a mater of time
    #+BEGIN_QUOTE
    In practical, however, any general-purpose computer can do any
    programmable problem, given enough time.
    #+END_QUOTE
*** I had a dream
    to build my computer to just run my emacs to do my daily jobs. Just
    like what I do right now.
** questions
** a-ha
* chapter 23
  Wow, so cool to use ~get~ command
  #+BEGIN_SRC 
  $ ftp ftp.gnu.org
  User (ftp.gnu.org:(none)): anonymous
  cd
  Remote directory ls
  Failed to change directory.
  ls
  ls
  CRYPTO.README
  MISSING-FILES
  MISSING-FILES.README
  README
  before-2003-08-01.md5sums.asc
  find.txt.gz
  gnu
  gnu+linux-distros
  ls-lrRt.txt.gz
  mirrors
  non-gnu
  old-gnu
  pub
  savannah
  third-party
  tmp
  video
  welcome.msg
  CRYPTO.README
  MISSING-FILES
  MISSING-FILES.README
  README
  before-2003-08-01.md5sums.asc
  find.txt.gz
  gnu
  gnu+linux-distros
  ls-lrRt.txt.gz
  mirrors
  non-gnu
  old-gnu
  pub
  savannah
  third-party
  tmp
  video
  welcome.msg
  cd gnu/diction
  ls
  diction-0.7.tar.gz
  diction-1.02.tar.gz
  diction-1.11.tar.gz
  diction-1.11.tar.gz.sig
  ls -al
  drwxrwxr-x    2 0        3003         4096 Sep 17  2007 .
  drwxrwxr-x  318 0        3003        12288 Jan 25 14:12 ..
  -rw-r--r--    1 3003     65534       68940 Aug 28  1998 diction-0.7.tar.gz
  -rw-r--r--    1 3003     65534       90957 Mar 04  2002 diction-1.02.tar.gz
  -rw-r--r--    1 3003     65534      141062 Sep 17  2007 diction-1.11.tar.gz
  -rw-r--r--    1 3003     65534         189 Sep 17  2007 diction-1.11.tar.gz.sig
  get diction-1.11.tar.gz
  bye
  #+END_SRC

  Unfortunately, I got this:
  #+BEGIN_SRC sh
  $ ./configure
  checking build system type... ./config.guess: unable to guess system type
  configure: error: cannot guess build type; you must specify one
  #+END_SRC

  I later follow the instruction of this book on a linux machine without
  any issue. But, this book did not explain too much info on how
  makefile works. So, I need do some further study.
** add-on reading
   [[http://www.cs.colby.edu/maxwell/courses/tutorials/maketutor/][this is good starting point]].
*** GNU Manual: An Introduction to Makefiles
    The goal of reading the manual to answer a question by [[https://www.cfd-online.com/Forums/openfoam-programming-development/196114-why-wmake-not-listen-me.html][myself]].
**** 2.1 What a Rule Looks Like
     Some people like space, but why the creator of make prefre tab?
**** 2.2 A Simple Makefile
     - what is cc?

       Just a complier. I saw people using this:
       
       CC = g++
       
     - what is object file?
       
       I think object files are like components of a bike. In order to
       build a bike, you need to have wheels, frame, cranksets,
       .... If you want to buld a bike without object file, it's like
       you hide all the intermidiate processed of building that
       bike. If you have some luck, for example all the component and
       you have an experienced MECHANICS (e.g. Gary Blem), you would
       have a nice bike once you 'make' the bike.

       In reality, this is not the case. When you build a bike, you
       find the component on-line one by one. Sometimes, those
       components are not suit for each other. Even if have all the
       components, you need to build the bike from those components
       one by one. Often, you will make mistake. But, it doesn't
       matter too much if you build you bike in a modulize fasion.

       I think this is exactly why we need object file in building a
       bin program.

       #+BEGIN_SRC make
       groupset.o : gear_levers.c brake_levers.c \
                  brakes.c derailleurs.c bottom_bracket.c \
                  crankset.c chain.c cogset.c tool_sets.h
                  cc -c groupset.c
       #+END_SRC
**** 2.3 How `make' Processes a Makefile
     
     If you writing code, use `'.

     If any source code is changed, when `make', the system will only
     updated those object codes who are depedent on those source file.

**** 2.4 Variables Make Makefiles Simpler
     
     `$(objects)' is another format of `alias'.

**** 2.5 Letting `make' Deduce the Recipes
