* what is the name?
  - Yes, it is called a bit.
  
  - Gate: name of the lights device.

  - And gate: I love computer people.
    
  - NANA gate: easy to understand.

  - NOT gate: result is not input.

  Yes, I can understand NAND gate!
* Diagrams

  when s is off, what will happen?

  I see the gates openning and closing but I cannot understand why the
  author say it is "memory"? When 's' is off, 'o' stays the way it
  was. How can this called memory? From my understanding, if there is
  nothing there, ( no wires or gates ), everytime a person observing
  the state of 'o', 'o' is still 'o'. Is this called memory? In my
  navive eye, memory is something one can pick...

  Wait, what is memory?

  I still don't understand hwo 4 ngates create a one bit memory.

  Let me summary what I've learn:

  When 's' is on, input determine output;
  When 's' is off, input cannot affect output;

  So, if you want to change the information in that bit, turn 's' on,
  do something that you know. Then turn 's' off, whatever the next
  input is, the output always stays what it was.

* A Rose by Any Other name

  Byte looks like a WUGONG.

* Codes
* More gate combinations
  The 'decoder' is hard to follow, but if you set back and look the
  overall structure of the system, I can understand what's going here:
  by reading the output, we now what's input.

* Back to the Byte

  "Enabler": 8 AND gates.

  If you connect a Byte with an "Enabler" then you got a "Register".

* The Magic Bus

  What's gona happen when enable the output of two registers onto the
  bus at the same time?

  Am I correct:

  When you want to "copy" the information from R1 to R4, one first turn on
  'e', then turn on R4 'e' and 's'. The "copy" is done.

  And it turns out that the turning of 's' is slight different from
  'e': you turn 's' on then close it.

* More Gate Combinations

  This two NOT gates and four NAND gates are hard to understand.
  
  Forget what's NOT gate.

  (Recap: NAND gates: Negtive AND gate.)
* First half of the computer

  What's cubbyholes? It's a matrix that you can read one of hole each
  time.

  What's register? It's a combination of byte and enabler.

  For the lower part of the 16x16 grid, i.e., the bus, 's', and 'e'
  bit, what's their role? What's their functionality?

  What's the function 's' and 'e' that connect to Register? Can we
  directly connect 'x' to the BUS?
* Numbers
  - ||||/||||/||||/
* The Other Half Of The Computer
  R0,R1,R2,R3,ACC,TMP
* Gates
  | a | b | NAND | AND | OR | XOR |
  |---+---+------+-----+----+-----|
  | 0 | 0 |    1 |   0 |  0 |   0 |
  | 0 | 1 |    1 |   0 |  1 |   1 |
  | 1 | 0 |    1 |   0 |  1 |   1 |
  | 1 | 1 |    0 |   1 |  1 |   0 |
* The Left and Right Shifters
* The Exclusive ORer
  This is what it is:
  #+BEGIN_SRC elisp
  (string= "A" "A")  
  #+END_SRC
* The Adder
  It is a little bit harder to understand adding three bits. Then I go
  back to adding two bits. Everything works now.
 
  Try to understanding this sentences:
  #+BEGIN_VERSE
  The left XOR tells us if ‘a’ and ‘b’ are different. If they are, and ‘carry in’ is off, or if ‘a’ and ‘b’ are the same and ‘carry in’ is on, then the right XOR will generate 1 as the sum for the current column. The lower AND gate will turn on ‘carry out’ if both inputs are on. The upper AND gate will turn on ‘carry out’ if ‘carry in’ and one of the inputs are on.
  #+END_VERSE
  #+END_SRC
* The Comparator And Zero
  Things getting harder.
* The Arithmetic and Logic Unit
  Then go back to find what's decoder. ALU looks not that complicated.
* More of the Processor
  ACC: just an another Register, but it temporarily store the output
  of ALU.

  MAR:The one remember the location of the bytes in RAM. For example,
  in a 256 bytes Memory, one need a register, which is connected to
  two 4x16 decoders, to 'remember' where the byte is.
* The Clock
  Cool, now I know what's enable and set bits on a register. Just
  connect the clock and 'delayed clock' the two gates: AND and OR.
* Doing Something Useful
  Draw a processor.
#+BEGIN_VERSE
+------+-----------+-----------------------+---------------+---------+----------+---------+-----------------+
|      |           |                       |               |         |          |         |a                |
|      |           |                       |               |         |          |      +--+s    M A R       |
|      |    +------+-----+              +--+---+       +---+--+   +--+---+   +--+---+  |  +-----------------+
|      |    |    TMP    s+----+         |  R0  |       |   R1 |   |  R2  |   |  R3  |  |  |                 |
|      |    +------+-----+    |         | s  e |       | s  e |   | s  e |   | s  e |  |  |                 |
|      |           |          |         +-+--+-+       +-+--+-+   +-+--+-+   +-+--+-+  |  |                 |
|      |    +------+-----+    |           |  |           |  |       |  |       |  |    |  |                 |
|      |    |    bus 1   +--+ |           |  |+----------+--+-------+--+-------+--+-+  |  |                 |
|      |    +------+-----+  | |           |  ++                                     +--+  |                 |
|      |           |        | |           +---+                                     |     |      R          |
|      |           |        | +---------------+                                     |     |                 |
|      |       +---+        +-----------------+        Control Section              |     |                 |
|      |       |                 +------------+                                     |     |                 |
|      |       |                 |+-----------+                                     |     |      A          |
|    +-+-------+--+  'op'        ||+----------+                                     |     |                 |
|    | A       B  +--------------+||          +--+-+---------------------------+--+-+     |                 |
|    |            +---------------+|             | |                           |  |       |                 |
|    |            +----------------+             | |                           |  |       |      M          |
|    |            +------ carry in               | |                           |  |       |                 |
|    |    ALU     |                              | |                           |  |       |                 |
|    |            +------ carry out              | |                           |  |       |                 |
|    |            +------ a larger               | |                           |  |       |                 |
|    |            +------ equal                  | |                           |  |       |                 |
|    |            +------ zero                   | |                           |  |       |                 |
|    +-----+------+                              | |                           |  |       |                 |
|          |                                     | |                           |  |       |                 |
|          |                                     | |                           |  +-------+s                |
|     +----+-----+                               | |                           +----------+e                |
|     |         s+-------------------------------- |                                      |                 |
|     |   ACC   e+---------------------------------+                                +-----+i/o              |
|     +----+-----+                                                                  |     +-----------------+
|          |                                                                        |
-----------+------------------------------------------------------------------------+
#+END_VERSE
* Everything Under Control
* Doing Something Useful Revised
  What's the difference between stepper and Clock? We have more
  'switches' if it is a stepper otherwise what can you do with one clock?
* What's Next
* The First Great Invention
  IR: "Instruction Register" → tells CPU to do one of seven things:

  - add
  - shift right
  - shift left
  - Not
  - And
  - Or
  - EOR

  Set (decide) the wires in the control section to do the desired
  operation.

  Step 1 does two things: fetch the address in IAR to MAR; and add 1
  to the value in IAR (don't know why do this).

  "Putting a series of instructions in RAM and having the CPU execute
  them is a great invention."

  IAR: Instruction Address Register. → store the RAM address of the
  next instruction what will move into IR.
* Instructions
* The Arithmetic or Logic Instructions
  IRA: Instruction Address Register.

  What is computer language? The idea of using a shorthand.
* TODO The Load and Store Instruction
  How the first instruction moves a byte from RAM to a register?

  Try to understand → When 3x8 decoder is on '000' (step 4), it enables Reg A
  and sets MAR, which results MAR 'store' the bytes in Reg A? Then in
  Step 5, the bytes in RAM will 'store' the data to Reg B.

  The issue is that in the book:

  #+BEGIN_VERSE
  The Instruction Code for the Load instruction is 0000. And LD in the table means: → Load RB from RAM address in RA.
  #+END_VERSE

  It seems that I have the opposite meaning. What' wrong with my
  understanding?

  Confused: why Reg A has four registers? Any difference between those
  registers? Same for the Reg B.
* The Data Instruction
  Kinda lost. Is this Load and Store Instruction? Alias? No, they are
  a new type of instruction.

  The difference is that where in the RAM it will get byte.

  In Load instruction, it only have specify two registers where the
  byte coming and going but nothing about the bytes. Is this
  the fundamental difference between Load/store Instruction with Data
  Instruction?
* The Second Great Invention
  Jump instruction. Wait, what is IRA? It's the instruction register
  address.

  Then, it's the IR holds the instruction or The RAM (IAR pointing
  towards to) holds the instruction?
